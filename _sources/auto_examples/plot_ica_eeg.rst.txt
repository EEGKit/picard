

.. _sphx_glr_auto_examples_plot_ica_eeg.py:


=======================================================
Blind source separation using preconditioned ICA on EEG
=======================================================

The example runs the Picard-O algorithm proposed in:

Pierre Ablin, Jean-Fran√ßois Cardoso, Alexandre Gramfort
Faster ICA under orthogonal constraint
ArXiv Preprint, Nov 2017
https://arxiv.org/abs/1711.10873




.. code-block:: python


    # Author: Pierre Ablin <pierre.ablin@inria.fr>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    import numpy as np
    import matplotlib.pyplot as plt
    import mne
    from mne.datasets import sample
    from scipy.stats import kurtosis

    from picard import picard

    print(__doc__)







Generate sample EEG data



.. code-block:: python

    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'

    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(1, 40, n_jobs=1)  # 1Hz high pass is often helpful for fitting ICA

    picks = mne.pick_types(raw.info, meg=False, eeg=True, eog=False,
                           stim=False, exclude='bads')

    random_state = 0
    data = raw[picks, :][0]
    data = data[:, ::2]  # decimate a bit

    # Run ICA on data, after reducing the dimension

    K, W, Y = picard(data, n_components=30, ortho=True)





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/pierre/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    Setting up band-pass filter from 1 - 40 Hz
    l_trans_bandwidth chosen to be 1.0 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 497 samples (3.310 sec) selected


Plot results



.. code-block:: python


    n_plots = 10
    T_plots = 1000
    order = np.argsort(kurtosis(Y[:, :T_plots], axis=1))[::-1]
    models = [data[:n_plots], Y[order[:n_plots][::-1]]]
    names = ['Observations (raw EEG)',
             'ICA recovered sources']

    fig, axes = plt.subplots(2, 1, figsize=(7, 7))
    for ii, (model, name, ax) in enumerate(zip(models, names, axes)):
        ax.set_title(name)
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        offsets = np.max(model, axis=1) - np.min(model, axis=1)
        offsets = np.cumsum(offsets)
        ax.plot((model[:, :T_plots] + offsets[:, np.newaxis]).T, 'k')

    fig.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_ica_eeg_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  2.537 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ica_eeg.py <plot_ica_eeg.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ica_eeg.ipynb <plot_ica_eeg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
